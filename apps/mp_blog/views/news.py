from django.views.generic import TemplateView
from django.views.generic.detail import DetailView
from django.views.generic.list import ListView

from ..models.news import NewsEntry
from .mixins import EntryPreviewMixin

NEWS_PATHS = {
    'customers': '/news/customer-press-releases/',
    'in the news': '/news/',
    'press releases': '/news/matterport-press-releases/',
}

MOBILE_NAVIGATION_HEADERS = {
    'customers': 'Customer Press Releases',
    'in the news': 'Matterport in Reality Capture & Virtual Reality News',
    'press releases': 'Matterport Press Releases',
}


class NewsList(ListView):
    """
    View returning a list of published news entries.
    """
    paginate_by = 12
    template_name = 'mp_blog/news/entry_list.html'
    category_name = None

    def get_queryset(self):
        """
        Return a queryset of published news entries
        """
        qs = NewsEntry.published.all()

        if self.category_name:
            qs = qs.filter(
                categories__title__startswith=self.category_name)

        return qs

    def get_context_data(self, **kwargs):
        context = super(NewsList, self).get_context_data(**kwargs)
        if self.category_name:
            context['active_link'] = self.category_name
            context['absolute_path'] = NEWS_PATHS[self.category_name.lower()]
            context['mobile_navigation_header'] = \
                MOBILE_NAVIGATION_HEADERS[self.category_name.lower()]

        return context


class NewsDetail(EntryPreviewMixin, DetailView):
    """
    Detailed view for a NewsEntry.
    """
    queryset = NewsEntry.published.on_site
    template_name = 'zinnia/entry_detail.html'
    permissions_required = [
        'mp_blog.can_view_all',
    ]


class MatterportMediaKitView(TemplateView):
    """
    View returning the Matterport Media Kit
    """
    # TODO - this page might be generated by widgy
    template_name = 'mp_blog/news/entry_list.html'

    def get_context_data(self, **kwargs):
        context = super(MatterportMediaKitView,
                        self).get_context_data(**kwargs)

        context['active_link'] = 'Matterport Media Kit'
        return context


class PressInquiriesView(TemplateView):
    """
    View returning Press Inquiries
    """
    # TODO - this page might be generated by widgy
    template_name = 'mp_blog/news/entry_list.html'

    def get_context_data(self, **kwargs):
        context = super(PressInquiriesView, self).get_context_data(**kwargs)
        context['active_link'] = 'Press Inquiries'
        return context
